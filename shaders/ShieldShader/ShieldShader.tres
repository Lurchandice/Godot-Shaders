/*
 * Written in Godot 3.2.2 Stable
 * 28th July 2020
 * VisualShader used, this is the output with refractored names
 */

shader_type spatial;
render_mode cull_disabled, unshaded, shadows_disabled;

uniform sampler2D Texture;
uniform vec4 Shield_Color : hint_color;
uniform sampler2D Noise_Texture;
uniform float Disolve_neg1_to_1;


// TRIPLANAR FUNCTION GLOBAL CODE
	vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
		vec4 samp = vec4(0.0);
		samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
		samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
		samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
		return samp;
	}

	uniform vec3 triplanar_scale = vec3(1.0, 1.0, 1.0);
	uniform vec3 triplanar_offset;
	uniform float triplanar_sharpness = 0.5;

	varying vec3 triplanar_power_normal;
	varying vec3 triplanar_pos;

void vertex() {
// Output:0

	// TRIPLANAR FUNCTION VERTEX CODE
		triplanar_power_normal = pow(abs(NORMAL), vec3(triplanar_sharpness));
		triplanar_power_normal /= dot(triplanar_power_normal, vec3(1.0));
		triplanar_pos = VERTEX * triplanar_scale + triplanar_offset;
		triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

void fragment() {
// TextureUniformTriplanar:25
	vec3 n_out25p0;
	float n_out25p1;
	{
		vec4 n_tex_read = triplanar_texture( Texture, triplanar_power_normal, triplanar_pos );
		n_out25p0 = n_tex_read.rgb;
		n_out25p1 = n_tex_read.a;
	}

// ColorFunc:26
	vec3 n_out26p0;
	{
		vec3 c = n_out25p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out26p0 = vec3(max3, max3, max3);
	}

// ColorUniform:27
	vec3 n_out27p0 = Shield_Color.rgb;
	float n_out27p1 = Shield_Color.a;

// ColorOp:21
	vec3 n_out21p0 = vec3(1.0) - (vec3(1.0) - n_out26p0) * (vec3(1.0) - n_out27p0);

// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// TextureUniformTriplanar:28
	vec3 n_out28p0;
	float n_out28p1;
	{
		vec4 n_tex_read = triplanar_texture( Noise_Texture, triplanar_power_normal, triplanar_pos );
		n_out28p0 = n_tex_read.rgb;
		n_out28p1 = n_tex_read.a;
	}

// Texture:29
	vec3 n_out29p0;
	float n_out29p1;
	{
		vec4 Noise_Texture_tex_read = texture(Noise_Texture, n_out2p0.xy);
		n_out29p0 = Noise_Texture_tex_read.rgb;
		n_out29p1 = Noise_Texture_tex_read.a;
	}

// ScalarUniform:24
	float n_out24p0 = Disolve_neg1_to_1;

// ScalarFunc:4
	float n_out4p0 = sin(n_out24p0);

// ScalarOp:5
	float n_in5p1 = 2.20000;
	float n_out5p0 = n_out4p0 / n_in5p1;

// ScalarOp:8
	float n_out8p0 = dot(n_out29p0, vec3(0.333333, 0.333333, 0.333333)) - n_out5p0;

// ScalarFunc:9
	float n_out9p0 = round(n_out8p0);

// ScalarOp:22
	float n_out22p0 = n_out27p1 * n_out9p0;

// ScalarOp:10
	float n_in10p1 = 0.05000;
	float n_out10p0 = n_out8p0 - n_in10p1;

// ScalarOp:11
	float n_in11p0 = 1.00000;
	float n_out11p0 = n_in11p0 - n_out10p0;

// ScalarFunc:12
	float n_out12p0 = round(n_out11p0);

// Color:14
	vec3 n_out14p0 = vec3(0.000000, 1.000000, 0.812500);
	float n_out14p1 = 1.000000;

// VectorOp:13
	vec3 n_out13p0 = vec3(n_out12p0) * n_out14p0;

// Output:0
	ALBEDO = n_out21p0;
	ALPHA = n_out22p0;
	EMISSION = n_out13p0;

}

void light() {
// Output:0

}